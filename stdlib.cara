abc = 1+2

module List {

opaque type List[a] = 
  | Empty
  | Cons(a,List[a])

empty : List[a]
empty = Empty

cons(a,List[a]): List[a]
cons(a,as) = Cons(a,as)

length(List[a]): Int
length(Empty)      = 0
length(Cons(a,as)) = 1 + length(as)

empty?(List[a]): Bool
empty?(Empty) = True
empty?(_)     = False

map(a -> b, List[a]): List[b]
map(_, [])    = []
map(f, x::xs) = f(x) ++ map(f,xs)

test: []    == empty
test: [1]   == cons(1,[])
test: [1,2] == cons(1,cons(2,[]))

test: isEmpty(empty)

test "cons is not empty" (Int,List[Int]):
  \x,xs -> !isEmpty(cons(x,xs))

} // module List

module Gen {

char = Gen {
  code = int!(25,83)
  Char.fromCode(code)
}

list(item) = list(item,[])
list(item,acc) = Gen {
  nextPlease = weightedBool!(0.6)
  if nextPlease then {
    newItem = item!
    list(item, acc ++ newItem)
  } 
  else acc
}

} // module Gen

*/
