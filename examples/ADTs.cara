type User
  = Anonymous
  | LoggedIn({ email: String, name: String })

user1 = Anonymous
user2 = LoggedIn({ email: "a@example.com", name: "Abc" })

// This means LoggedIn is a function from the record to User

email(user: User): Maybe(String)
email(Anonymous)     = Nothing
email(LoggedIn(rec)) = Just(rec.email)

/* The type signature above could have just as well been:

email(user): Maybe(String) // omit the argument type (it will be inferred)
email(User): Maybe(String) // omit the argument name

The argument name isn't binding to the function definition,
but it's useful for documentation.

Another alternative:

email(Anonymous)         = Nothing
email(LoggedIn({email})) = Just(email)

Another alternative:

email(Anonymous)      = Nothing
email(LoggedIn({..})) = Just(email)

Another alternative:

email(x) = case x of
  Anonymous -> Nothing
  LoggedIn(r) -> r.email

No \case though - we don't do currying
*/
