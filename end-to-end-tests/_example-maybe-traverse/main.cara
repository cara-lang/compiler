type Maybe[a] =
  | Nothing
  | Just(a)

traverse : (a -> Maybe[b]) -> List[a] -> Maybe[List[b]]
traverse(fn,list) = {
  go([],bs) = Just(List.reverse(bs))
  go([a,...as],bs) = 
    case fn(a) of
      Nothing -> Nothing
      Just(b) -> go(as,b++bs)

  go(list,[])
}

xs = [1,2,3,4,5]
ys = [6,7,8,9,10]
f = \n -> if n == 3 then Nothing else Just(n)

IO.println!(xs |> traverse(f))
IO.println!(ys |> traverse(f))
