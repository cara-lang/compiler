- [ ] adhoc polymorphism (without typeclasses, just straight up function overloading - multiple arities)
- [ ] adhoc polymorphism (without typeclasses, just straight up function overloading - single arity different types)
- [ ] eq typeclass
- [ ] usage of eq typeclass for member function
- [ ] adhoc polymorphism (typeclass instances)
- [ ] tail recursion (100k steps loop?)
- [ ] tail recursion modulo cons (show off different function calls)
- [ ] case..of A a | B a if the `a` is the same
- [ ] case..of A a b | B a b if the `a` and `b` are the same respectively
- [ ] case..of guards
- [ ] eq.style OR pattern
- [ ] eq.style A a | B a if the `a` is the same
- [ ] eq.style A a b | B a b if the `a` and `b` are the same respectively
- [ ] eq.style guards
- [ ] i8,i16,i32,i64
- [ ] u8,u16,u32,u64
- [ ] BigInteger
- [ ] upcasting integers
- [ ] f32,f64
- [ ] BigDecimal
- [ ] Rational
- [ ] type annotation: omit name
- [ ] type annotation: omit type
- [ ] type annotation: omit name for 2 args of the same type - error
- [ ] type annotation: 2 labelled args with same type
- [ ] type annotation: omit return type - error
- [ ] monad examples - multiple files, show off the possibility to import and use unqualified

### Char, String escaping

- [ ] char unicode escape: '\u{1F496}'
- [ ] string unicode escape: "\u{1F496}"
- [ ] multiline string unicode escape: `\u{1F496}`

- [ ] chars DO need escaping '
- [ ] chars don't need escaping "
- [ ] chars don't need escaping `

- [ ] strings don't need escaping '
- [ ] strings DO need escaping "
- [ ] strings don't need escaping `

- [ ] multiline strings don't need escaping '
- [ ] multiline strings don't need escaping "
- [ ] multiline strings DO need escaping `

### Strings, Chars, extended grapheme clusters

- [ ] https://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/

- [ ] Swift does this
- [ ] Perl 6 does this
  - [ ] some abstraction called NFG - Normalization Form Grapheme?
  - [ ] https://perl6advent.wordpress.com/2015/12/07/day-7-unicode-perl-6-and-you/

- [ ] char.toBytes -> List[UInt8]
- [ ] char.toCodePoints -> List[Char]?

- [ ] char.lengthInBytes (name subject to change) -> length of char.toBytes
- [ ] char.lengthInCodePoints -> length of char.toCodePoints

- [ ] char.length == 1 (don't expose in API)
- [ ] char1 == char2 needs to do the unicode algorithm, can't just compare bytes

- [ ] string.toGraphemeClusters -> List[Char]
- [ ] string.toBytes -> List[UInt8]
- [ ] string.toCodePoints -> List[Char]?

- [ ] string.length -> length of toGraphemeClusters
- [ ] string.lengthInBytes -> length of toBytes
- [ ] string.lengthInCodePoints -> length of toCodePoints

### ...
