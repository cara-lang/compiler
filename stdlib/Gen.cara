/*
`Gen` is used for property-based testing.

It's a bit more advanced version of `Random` that holds the random numbers it
used to generate the random values.

This, together with the generator function hidden in Gen, is used by the tooling
to shrink the values automatically. You can think of the generators as parsers of
these random numbers.
*/
module Gen {

  opaque type Gen[a] = Gen // TODO figure this out

  constant : a -> Gen[a]
  constant(a) = TODO("constant")

  pure : a -> Gen[a]
  pure(a) = constant(a)

  bind : Gen[a] -> (a -> Gen[b]) -> Gen[b]
  bind(gen,fn) = TODO("bind")

  andThen : (a -> Gen[b]) -> Gen[a] -> Gen[b]
  andThen(fn,gen) = bind(gen,fn)

  int : Int -> Int -> Gen[Int]
  int(from,to) = TODO("int(Int,Int)")

  char = Gen {
    code = int!(25,83)
    Char.fromCode(code)
  }

  // TODO to have Gen.rngSeed (see Random), we'd need:
  // map2
  // intAtLeast(0)

}
